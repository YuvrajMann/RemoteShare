<!DOCTYPE html>
<html>
<head>
    <title>Remote Share</title>
    <!-- Material Design and Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #1a1a1a;
            color: #ffffff;
        }
        .header {
            background-color: #2d2d2d;
            padding: 1rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            margin-bottom: 2rem;
        }
        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: #ffffff;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .file-container {
            background-color: #2d2d2d;
            border-radius: 8px;
            padding: 2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }
        .file-item {
            background-color: #3d3d3d;
            padding: 0.5rem 1rem;  /* Reduced padding */
            margin: 0.4rem 0;      /* Reduced margin */
            border-radius: 6px;    /* Smaller radius */
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }
        .file-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .file-details {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .file-metadata {
            color: #888;
            font-size: 0.85rem;
        }

        .file-metadata small {
            font-size: 0.75rem;   /* Smaller font size */
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 12px;
            flex: 1;
        }
        .action-buttons {
            display: flex;
            gap: 10px;
        }
        .btn-floating {
            transition: transform 0.2s ease;
            width: 36px !important;         /* Smaller buttons */
            height: 36px !important;
            line-height: 36px !important;
        }
        .btn-floating:hover {
            transform: scale(1.1);
        }
        .btn-floating i {
            font-size: 1.2rem !important;   /* Smaller icons */
            line-height: 36px !important;
        }
        #upload-btn {
            background-color: #2196F3;
        }
        #filename_text {
            color: #ffffff;
            font-weight: 500;
            font-size: 0.95rem;   /* Slightly smaller font */
            margin-bottom: 0;
        }
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #888;
        }
        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            color: #555;
        }
        #files-title {
            font-size: 22px;
            font-weight: bold;
            color: #ffffff;
            font-style: italic;
        }
        .progress-container {
            background: #3d3d3d;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 8px;
        }

        .progress-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }

        .filename {
            color: #fff;
            font-size: 0.9rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 70%;
        }

        #upload-progress-container {
            margin-top: 1rem;
        }

        .progress {
            background-color: #4a4a4a;
            margin: 0;
        }

        .progress .determinate {
            background-color: #2196F3;
            transition: width 0.3s ease;
        }

        .upload-details {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 8px;
            color: #fff;
            font-size: 14px;
        }

        #dropZone {
            position: relative;
            border: 2px dashed #555;
            transition: all 0.3s ease;
        }
        #dropZone.drag-over {
            border-color: #2196F3;
            background-color: rgba(33, 150, 243, 0.1);
        }
        .drop-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #2196F3;
            font-size: 1.5rem;
            pointer-events: none;
        }
        .drop-message i {
            font-size: 3rem;
            display: block;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="container">
            <div class="logo">
                <i class="material-icons">folder_shared</i>
                Remote Share
            </div>
        </div>
    </div>

    <div class="container">
        <div class="file-container" id="dropZone">
            <div class="row mb-4">
                <div class="col s6">
                    <span id="files-title">Shared Files</span>
                </div>
                <div class="col s6 right-align">
                    <button id="upload-btn" class="btn waves-effect waves-light" onclick="document.getElementById('fileUpload').click()">
                        <i class="material-icons left">cloud_upload</i>Upload File
                    </button>
                    <input type="file" id="fileUpload" style="display: none" multiple>
                </div>
            </div>
            <div class="drop-message" style="display: none;">
                <i class="material-icons">cloud_upload</i>
                <span>Drop files here to upload</span>
            </div>

            <div class="files-list">
                <% if (files && files.length > 0) { %>
                    <% files.forEach(file => { console.log(file) %>
                      <div class="file-item" data-file-id="<%= file.id %>">
                        <div class="file-info">
                            <i class="material-icons">insert_drive_file</i>
                            <div class="file-details">
                                <span class="filename-text"><%= file.name %></span>
                                <div class="file-metadata">
                                    <small><%= file.size %> â€¢ Uploaded at <%= file.created %></small>
                                </div>
                            </div>
                        </div>
                        <div class="action-buttons">
                            <a class="btn-floating waves-effect waves-light blue" onclick="downloadFile(this)" title="Download">
                                <i class="material-icons">download</i>
                            </a>
                            <a class="btn-floating waves-effect waves-light red" onclick="deleteFile(this)" title="Delete">
                                <i class="material-icons">delete</i>
                            </a>
                        </div>
                    </div>
                    <% }) %>
                <% } else { %>
                    <div class="empty-state">
                        <i class="material-icons">folder_open</i>
                        <p>No files uploaded yet</p>
                    </div>
                <% } %>
            </div>

            <!-- Add this after your file upload button -->
            <div id="upload-progress-container">
                <div id="upload-progress" style="display: none;" class="progress-container">
                    <div class="progress">
                        <div class="determinate" style="width: 0%"></div>
                    </div>
                    <div class="upload-details">
                        <span id="progress-text">0%</span>
                        <span id="upload-speed">0 B/s</span>
                    </div>
                </div>
            </div>

            <!-- Progress bar template (hidden) -->
            <template id="progress-bar-template">
                <div class="progress-container" style="margin-top: 10px;">
                    <div class="progress">
                        <div class="determinate" style="width: 0%"></div>
                    </div>
                    <div class="upload-details">
                        <span class="progress-text">0%</span>
                        <span class="upload-speed">0 B/s</span>
                    </div>
                    <span class="filename" style="color: #fff; font-weight: 500; margin-top: 5px; display: block;"></span>
                </div>
            </template>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            M.AutoInit();
            
            // Set up file upload handler
            document.getElementById('fileUpload').addEventListener('change', handleFileUpload);
            
            const dropZone = document.getElementById('dropZone');
            const dropMessage = document.querySelector('.drop-message');

            // Prevent default drag behaviors
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
                document.body.addEventListener(eventName, preventDefaults, false);
            });

            // Highlight drop zone when dragging over it
            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, unhighlight, false);
            });

            // Handle dropped files
            dropZone.addEventListener('drop', handleDrop, false);

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            function highlight(e) {
                dropZone.classList.add('drag-over');
                dropMessage.style.display = 'block';
            }

            function unhighlight(e) {
                dropZone.classList.remove('drag-over');
                dropMessage.style.display = 'none';
            }

            async function handleDrop(e) {
                const files = e.dataTransfer.files;
                unhighlight(e);
                
                for (let i = 0; i < files.length; i++) {
                    await uploadFile(files[i]);
                }
            }
        });

        async function handleFileUpload(event) {
            const files = event.target.files;
            if (!files || files.length === 0) return;

            for (let i = 0; i < files.length; i++) {
                await uploadFile(files[i]);
            }
        }

        function calculateSpeed(loaded, timeElapsed) {
            const bytesPerSecond = loaded / (timeElapsed / 1000);
            const units = ['B/s', 'KB/s', 'MB/s', 'GB/s'];
            let size = bytesPerSecond;
            let unitIndex = 0;

            while (size > 1024 && unitIndex < units.length - 1) {
                size /= 1024;
                unitIndex++;
            }

            return `${size.toFixed(2)} ${units[unitIndex]}`;
        }

        async function downloadFile(button) {
            const fileId = button.closest('.file-item').dataset.fileId;
            window.location.href = `/download/${fileId}`;
        }

        async function deleteFile(button) {
            const fileId = button.closest('.file-item').dataset.fileId;
            if (confirm('Are you sure you want to delete this file?')) {
                try {
                    const response = await fetch(`/file/${fileId}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    
                    if (result.success) {
                        M.toast({html: 'File deleted successfully!', classes: 'green'});
                        window.location.reload();
                    } else {
                        M.toast({html: 'Delete failed!', classes: 'red'});
                    }
                } catch (error) {
                    M.toast({html: 'Delete failed!', classes: 'red'});
                    console.error('Error:', error);
                }
            }
        }

        async function uploadFile(file) {
            const formData = new FormData();
            formData.append('file', file);
            
            const progressBar = createProgressBar(file.name);
            const progressContainer = document.getElementById('upload-progress-container');
            progressContainer.style.display = 'block';
            
            try {
                const xhr = new XMLHttpRequest();
                xhr.open('POST', '/upload', true);
                const startTime = Date.now();

                xhr.upload.onprogress = (e) => {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        const speed = calculateSpeed(e.loaded, Date.now() - startTime);
                        updateProgressBar(progressBar, percentComplete, speed);
                    }
                };

                xhr.onload = async function() {
                    if (xhr.status === 200) {
                        try {
                            completeProgressBar(progressBar);

                            // Get current date and time in MM/DD/YYYY HH:mm format
                            const now = new Date();
                            const dateStr = `${now.getMonth() + 1}/${now.getDate()}/${now.getFullYear()}`;
                            const hours = now.getHours().toString().padStart(2, '0');
                            const minutes = now.getMinutes().toString().padStart(2, '0');
                            const uploadTime = `${dateStr} ${hours}:${minutes}`;

                            // Instead of adding the file directly, fetch the latest file list
                            await fetchAndReplaceFilesList();

                            // Optionally, highlight the latest file (optional)
                            // addFileToUI({
                            //     id: ..., // if you have it
                            //     name: file.name,
                            //     size: formatFileSize(file.size),
                            //     created: uploadTime
                            // });

                            M.toast({html: `${file.name} uploaded at ${uploadTime}!`, classes: 'green'});
                            setTimeout(() => {
                                progressBar.remove();
                                if (!progressContainer.children.length) {
                                    progressContainer.style.display = 'none';
                                }
                            }, 2000);
                        } catch (error) {
                            errorProgressBar(progressBar);
                            M.toast({html: `Failed to process upload for ${file.name}`, classes: 'red'});
                        }
                    } else {
                        errorProgressBar(progressBar);
                        M.toast({html: `Failed to upload ${file.name}`, classes: 'red'});
                    }
                };

                xhr.onerror = function() {
                    errorProgressBar(progressBar);
                    M.toast({html: `Failed to upload ${file.name}`, classes: 'red'});
                };

                xhr.send(formData);
            } catch (error) {
                errorProgressBar(progressBar);
                M.toast({html: `Error uploading ${file.name}: ${error.message}`, classes: 'red'});
            }
        }

        // Add this helper function for formatting file sizes
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function createProgressBar(filename) {
            const template = document.getElementById('progress-bar-template');
            const progressBar = template.content.cloneNode(true).children[0];
            
            progressBar.querySelector('.filename').textContent = filename;
            document.getElementById('upload-progress-container').appendChild(progressBar);
            return progressBar;
        }

        function updateProgressBar(progressBar, percent, speed) {
            progressBar.querySelector('.determinate').style.width = `${percent}%`;
            progressBar.querySelector('.progress-text').textContent = `${Math.round(percent)}%`;
            progressBar.querySelector('.upload-speed').textContent = speed;
        }

        function completeProgressBar(progressBar) {
            progressBar.querySelector('.determinate').style.width = '100%';
            progressBar.querySelector('.progress-text').textContent = 'Complete';
            progressBar.querySelector('.determinate').style.backgroundColor = '#4CAF50';
        }

        function errorProgressBar(progressBar) {
            progressBar.querySelector('.determinate').style.backgroundColor = '#F44336';
            progressBar.querySelector('.progress-text').textContent = 'Failed';
        }

        // Update the addFileToUI function to be more robust
        function addFileToUI(fileData) {
            if (!fileData || !fileData.name) {
                console.warn('Missing file data:', fileData);
            }

            const filesList = document.querySelector('.files-list');
            const emptyState = filesList.querySelector('.empty-state');
            if (emptyState) emptyState.remove();

            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            if (fileData.id) fileItem.dataset.fileId = fileData.id; // ID only for logic, not display

            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="material-icons">insert_drive_file</i>
                    <div class="file-details">
                        <span class="filename-text">${fileData.name || 'Unknown'}</span>
                        <div class="file-metadata">
                            <small>${fileData.size || ''} â€¢ Uploaded at ${fileData.created || ''}</small>
                        </div>
                    </div>
                </div>
                <div class="action-buttons">
                    ${fileData.id ? `
                    <a class="btn-floating waves-effect waves-light blue" onclick="downloadFile(this)" title="Download">
                        <i class="material-icons">download</i>
                    </a>
                    <a class="btn-floating waves-effect waves-light red" onclick="deleteFile(this)" title="Delete">
                        <i class="material-icons">delete</i>
                    </a>
                    ` : ''}
                </div>
            `;
            filesList.insertBefore(fileItem, filesList.firstChild);
        }

        // Add this helper function:
        async function fetchAndReplaceFilesList() {
            try {
                const response = await fetch(window.location.pathname, {cache: "reload"});
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newList = doc.querySelector('.files-list');
                if (newList) {
                    document.querySelector('.files-list').innerHTML = newList.innerHTML;
                }
            } catch (err) {
                console.error('Failed to refresh file list:', err);
            }
        }
    </script>
</body>
</html>
