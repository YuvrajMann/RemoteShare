<!DOCTYPE html>
<html>

<head>
  <title>Remote Share</title>
  <!-- Material Design and Icons -->
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="icon" type="image/x-icon" href="/favicon.png">
</head>

<body>
  <div class="header">
    <div class="container" style="display: flex; align-items: center; justify-content: space-between;">
      <div class="logo" style="display: flex; align-items: center;">
        <i class="material-icons">folder_shared</i>
        Remote Share
      </div>
      <div style="display: flex; align-items: center;">
        <button id="theme-toggle" class="theme-toggle-btn">
          <i id="theme-icon" class="material-icons">dark_mode</i>
        </button>
        <button id="qr-toggle" class="theme-toggle-btn" style="margin-left: 12px;">
          <i class="material-icons">qr_code</i>
        </button>
      </div>
    </div>
  </div>

  <div class="container">
    <div class="file-container" id="dropZone">
      <div class="row mb-4">
        <div class="col s6">
          <span id="files-title">Shared Files</span>
        </div>
        <div class="col s6 right-align">
          <button id="upload-btn" class="btn waves-effect waves-light" onclick="document.getElementById('fileUpload').click()">
            <i class="material-icons left">cloud_upload</i>Upload File
          </button>
          <input type="file" id="fileUpload" style="display: none" multiple>
        </div>
      </div>
      <div class="drop-message" style="display: none;">
        <i class="material-icons">cloud_upload</i>
        <span>Drop files here to upload</span>
      </div>

      <!-- Move this block ABOVE the files-list -->
      <div id="upload-progress-container">
        <div id="upload-progress" style="display: none;" class="progress-container">
          <div class="progress">
            <div class="determinate" style="width: 0%"></div>
          </div>
          <div class="upload-details">
            <span id="progress-text">0%</span>
            <span id="upload-speed">0 B/s</span>
          </div>
        </div>
      </div>

      <div class="files-list">
        <% if (files && files.length > 0) { %>
        <% files.reverse().forEach(file => { console.log(file) %>
        <div class="file-item" data-file-id="<%= file.id %>">
          <div class="file-info">
            <i class="material-icons">insert_drive_file</i>
            <div class="file-details">
              <span class="filename-text"><%= file.name %></span>
              <div class="file-metadata">
                <small><%= file.size %> â€¢ Uploaded at <%= file.created %></small>
              </div>
            </div>
          </div>
          <div class="action-buttons">
            <a class="btn-floating waves-effect waves-light blue" onclick="downloadFile(this)" title="Download">
              <i class="material-icons">download</i>
            </a>
            <a class="btn-floating waves-effect waves-light red" onclick="deleteFile(this)" title="Delete">
              <i class="material-icons">delete</i>
            </a>
          </div>
        </div>
        <% }) %>
        <% } else { %>
        <div class="empty-state">
          <i class="material-icons">folder_open</i>
          <p>No files uploaded yet</p>
        </div>
        <% } %>
      </div>

      <!-- Progress bar template (hidden) -->
      <template id="progress-bar-template">
        <div class="progress-container" style="margin-top: 10px; display: flex; align-items: center; justify-content: space-between;">
          <div style="flex:1;">
            <div class="progress">
              <div class="determinate" style="width: 0%"></div>
            </div>
            <div class="upload-details">
              <span class="progress-text">0%</span>
              <span class="upload-speed">0 B/s</span>
            </div>
            <span class="filename" style="color: #fff; font-weight: 500; margin-top: 5px; display: block;"></span>
          </div>
          <button class="cancel-upload btn-flat" style="margin-left: 16px; background: transparent; box-shadow: none;">
            <i class="material-icons" style="font-size:20px; color:#e53935;">close</i>
          </button>
        </div>
      </template>
    </div>
  </div>

  <!-- QR Code Modal -->
  <div id="qr-modal" class="modal qr-modal-custom">
    <div class="modal-content">
      <span id="qr-modal-close" class="material-icons modal-close" style="position:absolute;top:12px;right:16px;cursor:pointer;font-size:26px;">close</span>
      <h6 class="qr-modal-title">Quick Setup</h6>
      <p class="qr-modal-desc">Scan this QR code on your other device to open Remote Share:</p>
      <div id="qrcode" class="qr-modal-qrcode"></div>
      <p class="qr-modal-url-label">
        Or enter this address in your browser:<br>
        <span id="qr-url" class="qr-modal-url"></span>
      </p>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      M.AutoInit();

      // Set up file upload handler
      document.getElementById('fileUpload').addEventListener('change', handleFileUpload);

      const dropZone = document.getElementById('dropZone');
      const dropMessage = document.querySelector('.drop-message');

      // Prevent default drag behaviors
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
      });

      // Highlight drop zone when dragging over it
      ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
      });

      ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
      });

      // Handle dropped files
      dropZone.addEventListener('drop', handleDrop, false);

      // Theme toggle logic
      const themeToggle = document.getElementById('theme-toggle');
      const themeIcon = document.getElementById('theme-icon');
      // Load saved theme
      if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark-mode');
        themeIcon.textContent = 'light_mode';
      }
      themeToggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-mode');
        const isDark = document.body.classList.contains('dark-mode');
        themeIcon.textContent = isDark ? 'light_mode' : 'dark_mode';
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
      });

      // QR code modal logic
      const qrToggle = document.getElementById('qr-toggle');
      const qrModal = document.getElementById('qr-modal');
      const qrUrlSpan = document.getElementById('qr-url');
      const qrModalClose = document.getElementById('qr-modal-close');
      let qrInstance = null; 

      // Initialize Materialize modal
      const qrModalInstance = M.Modal.init(qrModal, {endingTop: '20%'});

      qrToggle.addEventListener('click', function() {
        let url = window.location.origin;
        qrUrlSpan.textContent = url;
        // Always create a new QRious instance to avoid rendering issues
        const qrDiv = document.getElementById('qrcode');
        qrDiv.innerHTML = '';
        const qrCanvas = document.createElement('canvas');
        qrDiv.appendChild(qrCanvas);
        qrInstance = new QRious({
          element: qrCanvas,
          value: url,
          size: 140
        });
        qrModalInstance.open();
      });
      qrModalClose.addEventListener('click', () => qrModalInstance.close());

      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      function highlight(e) {
        dropZone.classList.add('drag-over');
        dropMessage.style.display = 'block';
      }

      function unhighlight(e) {
        dropZone.classList.remove('drag-over');
        dropMessage.style.display = 'none';
      }

      async function handleDrop(e) {
        const files = e.dataTransfer.files;
        unhighlight(e);

        for (let i = 0; i < files.length; i++) {
          await uploadFile(files[i]);
        }
      }
    });

    async function handleFileUpload(event) {
      const files = event.target.files;
      if (!files || files.length === 0) return;

      for (let i = 0; i < files.length; i++) {
        await uploadFile(files[i]);
      }
    }

    function calculateSpeed(loaded, timeElapsed) {
      const bytesPerSecond = loaded / (timeElapsed / 1000);
      const units = ['B/s', 'KB/s', 'MB/s', 'GB/s'];
      let size = bytesPerSecond;
      let unitIndex = 0;

      while (size > 1024 && unitIndex < units.length - 1) {
        size /= 1024;
        unitIndex++;
      }

      return `${size.toFixed(2)} ${units[unitIndex]}`;
    }

    async function downloadFile(button) {
      const fileId = button.closest('.file-item').dataset.fileId;
      window.location.href = `/download/${fileId}`;
    }

    async function deleteFile(button) {
      const fileId = button.closest('.file-item').dataset.fileId;
      if (confirm('Are you sure you want to delete this file?')) {
        try {
          const response = await fetch(`/file/${fileId}`, {
            method: 'DELETE'
          });
          const result = await response.json();

          if (result.success) {
            M.toast({
              html: 'File deleted successfully!',
              classes: 'green'
            });
            window.location.reload();
          } else {
            M.toast({
              html: 'Delete failed!',
              classes: 'red'
            });
          }
        } catch (error) {
          M.toast({
            html: 'Delete failed!',
            classes: 'red'
          });
          console.error('Error:', error);
        }
      }
    }

    // Add this function in your <script> block
    async function deletePartialFile(filename) {
      // Call your backend endpoint to delete the partial file by filename
      await fetch(`/file/partial/${encodeURIComponent(filename)}`, {
        method: 'DELETE'
      });
    }

    async function uploadFile(file) {
      const formData = new FormData();
      formData.append('file', file);

      const progressBar = createProgressBar(file.name, file.name); // Pass file.name as originalFileName
      const progressContainer = document.getElementById('upload-progress-container');
      progressContainer.style.display = 'block';

      try {
        const xhr = new XMLHttpRequest();
        progressBar.xhr = xhr; // Attach xhr to progressBar for cancel

        xhr.open('POST', '/upload', true);
        const startTime = Date.now();

        xhr.upload.onprogress = (e) => {
          if (e.lengthComputable) {
            const percentComplete = (e.loaded / e.total) * 100;
            const speed = calculateSpeed(e.loaded, Date.now() - startTime);
            updateProgressBar(progressBar, percentComplete, speed);
          }
        };

        xhr.onload = async function() {
          if (xhr.status === 200) {
            try {
              completeProgressBar(progressBar);
              await fetchAndReplaceFilesList();
              M.toast({
                html: `${getDisplayName(file.name)} uploaded!`,
                classes: 'green'
              });
              setTimeout(() => {
                progressBar.remove();
                if (!progressContainer.children.length) {
                  progressContainer.style.display = 'none';
                }
              }, 2000);
            } catch (error) {
              errorProgressBar(progressBar);
              M.toast({
                html: `Failed to process upload for ${getDisplayName(file.name)}`,
                classes: 'red'
              });
            }
          } else {
            errorProgressBar(progressBar);
            M.toast({
              html: `Failed to upload ${getDisplayName(file.name)}`,
              classes: 'red'
            });
          }
        };

        xhr.onerror = async function() {
          errorProgressBar(progressBar);
          await deletePartialFile(file.name);
          await fetchAndReplaceFilesList();
          M.toast({
            html: `Failed to upload ${getDisplayName(file.name)}`,
            classes: 'red'
          });
        };

        xhr.send(formData);
      } catch (error) {
        errorProgressBar(progressBar);
        await deletePartialFile(file.name);
        await fetchAndReplaceFilesList();
        M.toast({
          html: `Error uploading ${getDisplayName(file.name)}: ${error.message}`,
          classes: 'red'
        });
      }
    }

    // Add this helper function for formatting file sizes
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function getDisplayName(filename) {
      return filename.replace(/^\d+-/, '');
    }

    function createProgressBar(filename, originalFileName) {
      const template = document.getElementById('progress-bar-template');
      const progressBar = template.content.cloneNode(true).children[0];
      progressBar.querySelector('.filename').textContent = getDisplayName(filename);

      // Attach cancel logic
      const cancelBtn = progressBar.querySelector('.cancel-upload');
      cancelBtn.addEventListener('click', async () => {
        if (progressBar.xhr) {
          progressBar.xhr.abort();
          await deletePartialFile(originalFileName); // Use the original file name here
          progressBar.remove();
          await fetchAndReplaceFilesList();
          M.toast({
            html: `Upload cancelled for ${getDisplayName(originalFileName)}`,
            classes: 'blue'
          });
        }
      });

      document.getElementById('upload-progress-container').appendChild(progressBar);
      return progressBar;
    }

    function updateProgressBar(progressBar, percent, speed) {
      progressBar.querySelector('.determinate').style.width = `${percent}%`;
      progressBar.querySelector('.progress-text').textContent = `${Math.round(percent)}%`;
      progressBar.querySelector('.upload-speed').textContent = speed;
    }

    function completeProgressBar(progressBar) {
      progressBar.querySelector('.determinate').style.width = '100%';
      progressBar.querySelector('.progress-text').textContent = 'Complete';
      progressBar.querySelector('.determinate').style.backgroundColor = '#4CAF50';
    }

    function errorProgressBar(progressBar) {
      progressBar.querySelector('.determinate').style.backgroundColor = '#F44336';
      progressBar.querySelector('.progress-text').textContent = 'Failed';
    }

    // Update the addFileToUI function to be more robust
    function addFileToUI(fileData) {
      if (!fileData || !fileData.name) {
        console.warn('Missing file data:', fileData);
      }

      const filesList = document.querySelector('.files-list');
      const emptyState = filesList.querySelector('.empty-state');
      if (emptyState) emptyState.remove();

      const fileItem = document.createElement('div');
      fileItem.className = 'file-item';
      if (fileData.id) fileItem.dataset.fileId = fileData.id; // ID only for logic, not display

      fileItem.innerHTML = `
                <div class="file-info">
                    <i class="material-icons">insert_drive_file</i>
                    <div class="file-details">
                        <span class="filename-text">${fileData.name || 'Unknown'}</span>
                        <div class="file-metadata">
                            <small>${fileData.size || ''} â€¢ Uploaded at ${fileData.created || ''}</small>
                        </div>
                    </div>
                </div>
                <div class="action-buttons">
                    ${fileData.id ? `
                    <a class="btn-floating waves-effect waves-light blue" onclick="downloadFile(this)" title="Download">
                        <i class="material-icons">download</i>
                    </a>
                    <a class="btn-floating waves-effect waves-light red" onclick="deleteFile(this)" title="Delete">
                        <i class="material-icons">delete</i>
                    </a>
                    ` : ''}
                </div>
            `;
      filesList.insertBefore(fileItem, filesList.firstChild);
    }

    // Add this helper function:
    async function fetchAndReplaceFilesList() {
      try {
        const response = await fetch(window.location.pathname, {
          cache: "reload"
        });
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newList = doc.querySelector('.files-list');
        if (newList) {
          document.querySelector('.files-list').innerHTML = newList.innerHTML;
        }
      } catch (err) {
        console.error('Failed to refresh file list:', err);
      }
    }
  </script>
</body>

</html>